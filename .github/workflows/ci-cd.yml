  name: App CI/CD
  
  on:
    push:
      branches: [main]
      
  jobs:
    security-tests:
      runs-on: ubuntu-latest
  
      steps:
        # 1. Clonar el repositorio
        - name: Checkout code
          uses: actions/checkout@v3
  
        # 2. Configurar Python
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.9'
  
        # 3. Instalar dependencias
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
  
        # 4. Escaneo SAST con Bandit
        - name: Run Bandit (SAST)
          run: |
            pip install bandit
            bandit -r . -f txt -o bandit-report.txt || true
  
        # 5. Escaneo de dependencias con Safety
        - name: Run Safety (SAST)
          run: |
            pip install safety
            safety check --full-report
  
        # 6. Pruebas unitarias con Pytest
        - name: Run Pytest (Pruebas Funcionales)
          run: |
            pip install pytest
            pytest
  
        # 7. Subir artefactos (reporte de Bandit)
        - name: Upload Bandit report
          uses: actions/upload-artifact@v4
          with:
            name: bandit-report
            path: bandit-report.txt
  
    container-scan-and-dast:
      runs-on: ubuntu-latest
      needs: security-tests
  
      steps:
        # 1. Clonar el repositorio
        - name: Checkout code
          uses: actions/checkout@v3
  
        # 2. Log in to Docker Hub
        - name: Log in to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_TOKEN }}
  
        # 3. Construir la imagen Docker
        - name: Build Docker image
          run: docker build -t app-image:latest -f Dockerfile.app .
  
        # 4. Escanear la imagen con Trivy
        - name: Scan Docker image with Trivy (SAST)
          run: |
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            trivy image --severity HIGH,CRITICAL app-image:latest
        
        # 5. OWASP ZAP Scan (DAST)    
        - name: Run OWASP ZAP Baseline Scan (DAST)
          run: |
              docker run --network host -t ghcr.io/zaproxy/zaproxy:latest zap-baseline.py -t http://localhost:8080 -r zap-report.html || true 
          # "|| true" evita fallo si hay alertas
        
        # 6. Upload report
        - name: Upload ZAP report
          uses: actions/upload-artifact@v4
          with:
              name: zap-report
              path: zap-report.html
    
        ##- name: Stop app container
        ## run: docker stop app-container
  
        # 7. Subir la imagen a Docker Hub
        - name: Push Docker image (if on main branch)
          if: github.ref == 'refs/heads/main'
          run: |
            docker tag app-image:latest ${{ secrets.DOCKER_HUB_USERNAME }}/app-image:latest
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/app-image:latest