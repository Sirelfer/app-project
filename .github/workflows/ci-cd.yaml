  name: App CI/CD
  
  on:
    push:
      branches: [main, fix-security-headers]
    pull_request:
      branches: [main, fix-security-headers]

  permissions:
   security-events: write  # Necesario para subir SARIF a Code Scanning
   contents: read         # Necesario para leer el código
      
  jobs:
    security-tests:
      runs-on: ubuntu-latest
  
      steps:
        # 1. Clonar el repositorio
        - name: Checkout code
          uses: actions/checkout@v3
  
        # 2. Configurar Python
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.9'
  
        # 3. Instalar dependencias
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install gunicorn

        - name: Run Gunicorn
          run: |
            gunicorn -w 4 -b 127.0.0.1:5000 app:app &
            sleep 5

        - name: Test with curl
          run: curl http://127.0.0.1:5000
  
        # 4. Escaneo SAST con Bandit
        - name: Run Bandit (SAST)
          run: |
            pip install bandit
            bandit -r . -f txt -o bandit-report.txt || true
        
        - name: Initialize CodeQL
          uses: github/codeql-action/init@v3
          with:
            languages: python
          
        - name: Perform CodeQL Analysis
          uses: github/codeql-action/analyze@v3
          with:
            output: codeql-results.sarif

        - name: Upload CodeQL SARIF to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v3
          with:
            category: codeql-analysis
            sarif_file: codeql-results.sarif
          if: always()
  
        # 5. Escaneo de dependencias con Safety
        - name: Run Safety (SAST)
          run: |
            pip install safety
            safety check --full-report
  
        # 6. Pruebas unitarias con Pytest
        - name: Run Pytest with Coverage (Pruebas Funcionales)
          run: |
            pip install pytest pytest-cov
            pytest --cov=./ --cov-report=html
        - name: Upload Coverage Report
          uses: actions/upload-artifact@v4
          with:
            name: coverage-report
            path: htmlcov/

        # 7. Subir artefactos (reporte de Bandit)
        - name: Upload Bandit report
          uses: actions/upload-artifact@v4
          with:
            name: bandit-report
            path: bandit-report.txt
  
    container-scan-and-dast:
      runs-on: ubuntu-latest
      needs: security-tests
  
      steps:
        # 1. Clonar el repositorio
        - name: Checkout code
          uses: actions/checkout@v3
  
        # 2. Log in to Docker Hub
        - name: Log in to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_TOKEN }}
  
        # 3. Construir la imagen Docker
        - name: Build Docker image
          run: docker build --no-cache -t app-image:latest -f Dockerfile.app .
  
        # 4. Escanear la imagen con Trivy
        - name: Scan Docker image with Trivy (SAST)
          run: |
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            trivy image --severity HIGH,CRITICAL app-image:latest
      
        # 4.1 Network 

        - name: Create Docker Network
          run: docker network create zapnet
        
        # 5. Iniciar la aplicación y permisos

        - name: Start the application
          run: docker run -d --net zapnet --name app-container -p 5000:5000 --user 1000:1000 app-image:latest
         
          #OLD #run: docker run -d --net zapnet --name app-container -p 5000:5000 app-image:latest

        
        - name: Check if app is responding
          run: |
           for i in {1..30}; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Application is up!"
              break
            fi
            echo "Waiting for application... ($i/30)"
            sleep 1
           done
           if [ $i -eq 30 ]; then
            echo "Application failed to start!"
            exit 1
           fi
        
        - name: Run Semgrep
          run: |
             python -m pip install semgrep
             semgrep --config=semgrep-rules/insecure-sql.yaml --sarif --output=semgrep-results.sarif . || {
               echo "Semgrep failed, creating empty SARIF file"
               echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Semgrep", "version": "1.0.0"}}, "results": []}]}' > semgrep-results.sarif
             }
          
         ##Oldsemgrep --config=p/default --sarif --output=semgrep-results.sarif .

        - name: Upload Semgrep SARIF to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v3
          with:
               sarif_file: semgrep-results.sarif
               category: semgrep-analysis 
          if: always()
  
        - name: Upload Semgrep report as artifact
          uses: actions/upload-artifact@v4
          with:
            name: semgrep-report
            path: semgrep-results.sarif
      
        - name: Check if app is responding
          run: |
              curl http://localhost:5000 || echo "App not responding!"
   
        - name: Set permissions for workspace
          run: |
           chmod -R 755 $(pwd)
        
        - name: Verify rule file exist
          run: |
           ls -l semgrep-results.sarif || echo "Semgrep SARIF file not generated!"
          ##ls -l $(pwd)/.zap/rules.tsv || echo "Rules.tsv not found!"
        
        - name: Test volume mapping
          run: |
           docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:latest touch /zap/wrk/test.txt || echo "Touch failed!"
           ls -l $(pwd)/test.txt || echo "Test file not created!"
           
        - name: Run OWASP ZAP Baseline Scan (DAST)
          run: |
            docker run --net zapnet -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:latest zap-full-scan.py -t http://app-container:5000 -r zap-report.html -c /zap/wrk/.zap/rules.tsv || true
          
        - name: Verify report generation
          run: |
           ls -l $(pwd)/zap-report.html || echo "Report not generated!"   
       
        # 7. Upload report

        - name: Upload ZAP report
          uses: actions/upload-artifact@v4
          with:
              name: zap-report
              path: zap-report.html
    owasp-top10-mapping:
      runs-on: ubuntu-latest
      needs: [security-tests, container-scan-and-dast]  # Ejecutar después de los escaneos
      steps:
       # 2. Ejecutar la acción alerts-to-owasp10
        - name: Map Alerts to OWASP Top 10
          uses: KittyChiu/alerts-to-owasp10@main
          env:
            ORGANISATION: ${{ github.repository_owner }}  # Nombre de la organización
            GITHUB_TOKEN: ${{ secrets.ALERTS_TOKEN }}    # Token con permisos security_events

        # 3. Subir el reporte CSV como artefacto
        - name: Upload OWASP Top 10 Mapping Report
          uses: actions/upload-artifact@v4
          with:
            name: owasp-top10-mapping
            path: mapping.csv

      # 4. Subir el reporte JSON como artefacto (opcional)
        - name: Upload All Alerts Report
          uses: actions/upload-artifact@v4
          with:
            name: all-alerts
            path: alerts.json
     
      # 8. Stop container 
        - name: Stop app container
          run: docker stop app-container
        - name: Cleanup Docker network
          if: always()
          run: docker network rm zapnet || true
  
        - name: Install Cosign
          uses: sigstore/cosign-installer@v3
        - name: Sign Docker image with Cosign
          run: |
            cosign sign --oidc-issuer=https://token.actions.githubusercontent.com \
            ${{ secrets.DOCKER_HUB_USERNAME }}/app-image:latest

          # 9. Push image to docker
        - name: Push Docker image (if on main branch)
          if: github.ref == 'refs/heads/main'
          run: |
            docker tag app-image:latest ${{ secrets.DOCKER_HUB_USERNAME }}/app-image:latest
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/app-image:latest
    
    docker-bench-security:
      runs-on: ubuntu-latest
      needs: container-scan-and-dast
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Run Docker Bench for Security
          run: |
            git clone https://github.com/docker/docker-bench-security.git
            cd docker-bench-security
            ./docker-bench-security.sh
        - name: Upload Docker Bench report
          uses: actions/upload-artifact@v4
          with:
            name: docker-bench-report
            path: docker-bench-security/output/